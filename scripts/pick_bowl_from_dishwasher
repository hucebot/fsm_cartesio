#!/usr/bin/env python

from cartesian_interface.pyci_all import *
from utils import set_custom_loggers
from states import (
    MoveToTargetFromCfg,
    FollowWaypointsFromCfg,
    GoToFromCfg,
    PalGripperGrasp,
    PalGripperRelease,
    RepeatDemo,
    SetPosturalFromCfg,
    UpdateOdom,
)

import rospkg
import rospy
import smach
import tf2_ros
from std_msgs.msg import Float32


def main():
    rospy.init_node("open_door_smach_node")
    rospack = rospkg.RosPack()

    # Set up tf2 listener
    tf_buffer = tf2_ros.Buffer()
    tf2_ros.TransformListener(tf_buffer)

    # Init CartesI/O client
    client = pyci.CartesianInterfaceRos()

    # Wait for tf listener
    rospy.sleep(1)

    # # Set 'time_from_start' param in the ros_control_bridge
    # ctrl_bridge_time_pub = rospy.Publisher(
    #     "/ros_control_bridge/time_from_start", Float32, queue_size=1
    # )
    # time_msg = Float32()
    # time_msg.data = 0.2
    # wait_start = time.time()
    # while ctrl_bridge_time_pub.get_num_connections() < 1:
    #     if time.time() - wait_start > 10:
    #         smach.logerr(f"No connections to /ros_control_bridge/time_from_start")
    #         sys.exit(0)
    # ctrl_bridge_time_pub.publish(time_msg)

    # Define SM parameters
    config_path = rospack.get_path("fsm_cartesio") + "/config/motions.yaml"
    demo_folder_path = rospack.get_path("fsm_cartesio") + "/config/demo"

    # Create a SMACH state machine
    set_custom_loggers()
    sm = smach.StateMachine(outcomes=["fsm_success", "fsm_fail"])

    # Open the state machine container
    with sm:
        # Go to dishwasher -----------------------------------------------------------
        smach.StateMachine.add(
            "INIT_ODOM",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "HOMING_0", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "HOMING_0",
            SetPosturalFromCfg(client, config_path, "posture_home", True),
            transitions={"success": "GO_TO_DISHWASHER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_TO_DISHWASHER",
            GoToFromCfg(client, "goto/reach", config_path, "dishwasher"),
            transitions={"success": "RESET_ODOM_0", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RESET_ODOM_0",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "DOCK_TO_DISHWASHER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "DOCK_TO_DISHWASHER",
            GoToFromCfg(client, "goto/reach", config_path, "dishwasher"),
            transitions={"success": "RESET_ODOM_1", "fail": "fsm_fail"},
        )
        # Open dishwasher ------------------------------------------------------------
        smach.StateMachine.add(
            "RESET_ODOM_1",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "PRE_OPEN_DISHWASHER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "PRE_OPEN_DISHWASHER",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pre_open_dishwasher_right"
            ),
            transitions={"success": "RUN_DEMO_OPEN_DISHWASHER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RUN_DEMO_OPEN_DISHWASHER",
            RepeatDemo(
                client,
                tf_buffer,
                config_path,
                "open_dishwasher_right",
                demo_folder_path,
            ),
            transitions={"success": "PRE_PULL_DRAWER", "fail": "fsm_fail"},
        )
        # Pull dishwasher drawer -----------------------------------------------------
        smach.StateMachine.add(
            "PRE_PULL_DRAWER",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pre_pull_dishwasher_top_drawer_right"
            ),
            transitions={"success": "RESET_ODOM_2", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RESET_ODOM_2",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "OPEN_GRIPPER_1", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "OPEN_GRIPPER_1",
            PalGripperRelease("parallel_gripper_right_controller"),
            transitions={"success": "GRASP_DRAWER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GRASP_DRAWER",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "grasp_dishwasher_top_drawer"
            ),
            transitions={"success": "CLOSE_GRIPPER_1", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "CLOSE_GRIPPER_1",
            PalGripperGrasp("parallel_gripper_right_controller"),
            transitions={"success": "PULL_DRAWER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "PULL_DRAWER",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pull_dishwasher_top_drawer"
            ),
            transitions={"success": "OPEN_GRIPPER_2", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "OPEN_GRIPPER_2",
            PalGripperRelease("parallel_gripper_right_controller"),
            transitions={"success": "RELEASE_DRAWER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RELEASE_DRAWER",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "release_dishwasher_drawer"
            ),
            transitions={"success": "PRE_PICK_BOWL", "fail": "fsm_fail"},
        )
        # Pick bowl ------------------------------------------------------------------
        smach.StateMachine.add(
            "PRE_PICK_BOWL",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pre_pick_bowl_from_dishwasher_right"
            ),
            transitions={"success": "RESET_ODOM_3", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RESET_ODOM_3",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "RUN_DEMO_PICK_BOWL", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RUN_DEMO_PICK_BOWL",
            RepeatDemo(
                client,
                tf_buffer,
                config_path,
                "pick_bowl_from_dishwasher_right",
                demo_folder_path,
            ),
            transitions={"success": "CLOSE_GRIPPER_2", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "CLOSE_GRIPPER_2",
            PalGripperGrasp("parallel_gripper_right_controller"),
            transitions={"success": "GO_BACK_AND_TURN_RIGHT", "fail": "fsm_fail"},
        )
        # Go to table ----------------------------------------------------------------
        smach.StateMachine.add(
            "GO_BACK_AND_TURN_RIGHT",
            GoToFromCfg(client, "goto/reach", config_path, "back_and_turn_right"),
            transitions={"success": "HOMING_1", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "HOMING_1",
            SetPosturalFromCfg(client, config_path, "posture_home", True),
            transitions={"success": "RESET_ODOM_4", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RESET_ODOM_4",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "GO_TO_TABLE", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_TO_TABLE",
            GoToFromCfg(client, "goto/reach", config_path, "table_far"),
            transitions={"success": "DOCK_TO_TABLE", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "DOCK_TO_TABLE",
            GoToFromCfg(client, "goto/reach", config_path, "table_for_placing"),
            transitions={"success": "RESET_ODOM_5", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RESET_ODOM_5",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "PLACE_BOWL", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "PLACE_BOWL",
            FollowWaypointsFromCfg(
                client, tf_buffer, config_path, "place_bowl_on_table_right"
            ),
            transitions={"success": "OPEN_GRIPPER_3", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "OPEN_GRIPPER_3",
            PalGripperRelease("parallel_gripper_right_controller"),
            transitions={"success": "GO_BACK", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_BACK",
            GoToFromCfg(client, "goto/reach", config_path, "back"),
            transitions={"success": "HOMING_2", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "HOMING_2",
            SetPosturalFromCfg(client, config_path, "posture_home", True),
            transitions={"success": "fsm_success", "fail": "fsm_fail"},
        )

    # Execute the state machine
    sm.execute()


if __name__ == "__main__":
    main()

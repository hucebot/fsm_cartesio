#!/usr/bin/env python

from cartesian_interface.pyci_all import *
from utils import set_custom_loggers
from states import (
    MoveToTargetFromCfg,
    FollowWaypointsFromCfg,
    GoToFromCfg,
    PalGripperGrasp,
    PalGripperRelease,
    RepeatDemo,
    SetPosturalFromCfg,
    UpdateOdom,
)

import rospkg
import rospy
import smach
import tf2_ros
from std_msgs.msg import Float32
from std_srvs.srv import Trigger, TriggerRequest


def main():
    rospy.init_node("open_door_smach_node")
    rospack = rospkg.RosPack()

    # Set up tf2 listener
    tf_buffer = tf2_ros.Buffer()
    tf2_ros.TransformListener(tf_buffer)

    # Init CartesI/O client
    client = pyci.CartesianInterfaceRos()

    # Wait for tf listener
    rospy.sleep(1)

    # # Set 'time_from_start' param in the ros_control_bridge
    # ctrl_bridge_time_pub = rospy.Publisher(
    #     "/ros_control_bridge/time_from_start", Float32, queue_size=1
    # )
    # time_msg = Float32()
    # time_msg.data = 0.2
    # wait_start = time.time()
    # while ctrl_bridge_time_pub.get_num_connections() < 1:
    #     if time.time() - wait_start > 10:
    #         smach.logerr(f"No connections to /ros_control_bridge/time_from_start")
    #         sys.exit(0)
    # ctrl_bridge_time_pub.publish(time_msg)

    # # Get request from LLM
    # srv_proxy = rospy.ServiceProxy("whisper_llm", Trigger)
    # req = TriggerRequest()
    # res = srv_proxy(req)
    # plan = json.loads(res.message)
    # object_to_pick = plan["actions"]["object"]

    object_to_pick = "sugar"
    demo_tag = f"pick_{object_to_pick}_from_table_right"

    # Define SM parameters
    config_path = rospack.get_path("fsm_cartesio") + "/config/motions.yaml"
    demo_folder_path = rospack.get_path("fsm_cartesio") + "/config/demo"

    # Create a SMACH state machine
    set_custom_loggers()
    sm = smach.StateMachine(outcomes=["fsm_success", "fsm_fail"])

    # Open the state machine container
    with sm:
        smach.StateMachine.add(
            "INIT_ODOM",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "PRE_PICK", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "PRE_PICK",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pre_pick_from_table_right"
            ),
            transitions={"success": "GO_TO_TABLE", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_TO_TABLE",
            GoToFromCfg(client, "goto/reach", config_path, "table"),
            transitions={"success": "GO_TO_OBJECT", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_TO_OBJECT",
            GoToFromCfg(client, "goto/reach", config_path, object_to_pick),
            transitions={"success": "RESET_ODOM", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RESET_ODOM",
            UpdateOdom(client, tf_buffer),
            transitions={"success": "RUN_DEMO", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RUN_DEMO",
            RepeatDemo(client, tf_buffer, config_path, demo_tag, demo_folder_path),
            transitions={"success": "POST_PICK", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "POST_PICK",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "post_pick_from_table_right"
            ),
            transitions={"success": "RELEASE_GRIPPER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RELEASE_GRIPPER",
            PalGripperRelease("parallel_gripper_right_controller"),
            transitions={"success": "fsm_success", "fail": "fsm_fail"},
        )

    # Execute the state machine
    sm.execute()


if __name__ == "__main__":
    main()

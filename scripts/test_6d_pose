#!/usr/bin/env python

from cartesian_interface.pyci_all import *
from utils import set_custom_loggers
from states import (
    MoveToTargetFromCfg,
    FollowWaypointsFromCfg,
    PalGripperRelease,
    PalGripperGrasp,
    UpdateOdom,
    SetPosturalFromCfg,
)

import rospkg
import rospy
import smach
import tf2_ros

def main():
    rospy.init_node("pick_object_from_table_smach_node")
    rospack = rospkg.RosPack()

    # Set up tf2 listener
    tf_buffer = tf2_ros.Buffer()
    tf2_ros.TransformListener(tf_buffer)

    # Init CartesI/O client
    client = pyci.CartesianInterfaceRos()

    # Wait for tf listener
    rospy.sleep(1)

    # Define SM parameters
    config_path = rospack.get_path("fsm_cartesio") + "/config/motions_test_6d_pose.yaml"

    # Create a SMACH state machine
    set_custom_loggers()
    sm = smach.StateMachine(outcomes=["fsm_success", "fsm_fail"])

    item = "mug"

    # Open the state machine container
    with sm:
        # smach.StateMachine.add(
        #     "HOMING",
        #     SetPosturalFromCfg(client, config_path, "posture_home", True),
        #     transitions={"success": "OPEN_GRIPPER", "fail": "fsm_fail"},
        # )
        smach.StateMachine.add(
            "OPEN_GRIPPER",
            PalGripperRelease("parallel_gripper_right_controller"),
            transitions={"success": "PRE_PICK", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "PRE_PICK",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pre_pick_right"
            ),
            transitions={"success": "GO_OVER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_OVER",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, f"over_{item}_right"
            ),
            transitions={"success": "GO_GRASP", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "GO_GRASP",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, f"grasp_{item}_right"
            ),
            transitions={"success": "CLOSE_GRIPPER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "CLOSE_GRIPPER",
            PalGripperGrasp("parallel_gripper_right_controller"),
            transitions={"success": "POST_PICK", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "POST_PICK",
            MoveToTargetFromCfg(
                client, tf_buffer, config_path, "pre_pick_right"
            ),
            transitions={"success": "RELEASE_GRIPPER", "fail": "fsm_fail"},
        )
        smach.StateMachine.add(
            "RELEASE_GRIPPER",
            PalGripperRelease("parallel_gripper_right_controller"),
            transitions={"success": "fsm_success", "fail": "fsm_fail"},
        )

    # Execute the state machine
    sm.execute()


if __name__ == "__main__":
    main()
